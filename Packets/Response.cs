using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MongoSQL.Packets
{
    public static class Response
    {
        public static int PacketNumbers = 4;

        public static byte[] testResponse = {
                     // Offset 0x00000000 to 0x00000157
	        0x01, 0x00, 0x00, 0x01, 0x01, 0x4B, 0x00, 0x00, 0x02, 0x03, 0x64, 0x65,
            0x66, 0x12, 0x69, 0x6E, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x69, 0x6F,
            0x6E, 0x5F, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x08, 0x53, 0x43, 0x48,
            0x45, 0x4D, 0x41, 0x54, 0x41, 0x08, 0x53, 0x43, 0x48, 0x45, 0x4D, 0x41,
            0x54, 0x41, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x0B,
            0x53, 0x43, 0x48, 0x45, 0x4D, 0x41, 0x5F, 0x4E, 0x41, 0x4D, 0x45, 0x0C,
            0x24, 0x00, 0x40, 0x00, 0x00, 0x00, 0xFD, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x22, 0x00, 0x13, 0x00, 0x00,
            0x04, 0x12, 0x61, 0x64, 0x6D, 0x69, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,

            0x13, 0x00, 0x00,
            0x00, 0x12, 0x61, 0x64, 0x6D, 0x69, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,

            0x06, 0x00, 0x00, 0x05,
            0x05, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x13, 0x00, 0x00, 0x06, 0x12, 0x44,
            0x65, 0x6D, 0x6F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x05, 0x00, 0x00, 0x07, 0xFE, 0x00, 0x00,
            0x22, 0x00};

        public static byte[] responseSchemaInit = {
            0x01, 0x00, 0x00, 0x01, 0x01, 0x4B, 0x00, 0x00, 0x02, 0x03, 0x64, 0x65,
            0x66, 0x12, 0x69, 0x6E, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x69, 0x6F,
            0x6E, 0x5F, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x08, 0x53, 0x43, 0x48,
            0x45, 0x4D, 0x41, 0x54, 0x41, 0x08, 0x53, 0x43, 0x48, 0x45, 0x4D, 0x41,
            0x54, 0x41, 0x08 };

        public static byte[] responseSchema2 = { 0x0B,
            0x53, 0x43, 0x48, 0x45, 0x4D, 0x41, 0x5F, 0x4E, 0x41, 0x4D, 0x45, 0x0C,
            0x24, 0x00, 0x40, 0x00, 0x00, 0x00, 0xFD, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x22, 0x00};

        public static byte[] responseSchemaEnd = { 0x05, 0x00, 0x00, 0x07, 0xFE, 0x00, 0x00, 0x22, 0x00 };

        public static byte[] responseSchemaName = { 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65 };

        public static byte[] responseLenght = { 0x13, 0x00, 0x00, 0x00, 0x12 };

        public static byte[] responseData = { };

        public static byte[] fullresponse = { };

        public static byte[] test = { 0x61, 0x64, 0x6D, 0x69, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20};

        /// <SCHEME>
        /// RESPONE = responseSchemaInit + [DATANAME]responseSchemaName + responseSchema2 + [DATAS](responseLenght + responseData) + responseSchemaEnd
        /// </SCHEME>

        public static byte[] Combine(params byte[][] arrays)
        {
            byte[] rv = new byte[arrays.Sum(a => a.Length)];
            int offset = 0;
            foreach (byte[] array in arrays)
            {
                System.Buffer.BlockCopy(array, 0, rv, offset, array.Length);
                offset += array.Length;
            }
            return rv;
        }

        public static byte[] showDatabases()
        {
            MongoClient client = new MongoClient(Configs.GlobalConfig.mongodbConnectionString);
            byte[] responseSchemaName = Encoding.ASCII.GetBytes("Database");
            fullresponse = Combine(responseSchemaInit, responseSchemaName);
            fullresponse = Combine(fullresponse, responseSchema2);

            using (var cursor = client.ListDatabases())
            {
                var databaseDocuments = cursor.ToList();
                int kostyl = 0;
                foreach (var databaseDocument in databaseDocuments)
                {
                    kostyl++;
                    fullresponse = Combine(fullresponse, responseLenght);
                    string dbname = databaseDocument["name"].ToString();
                    Console.WriteLine(dbname);
                    if (kostyl == 1)
                    {
                        if (dbname.Length < 18)
                        {
                            for (int i = 0; i < (18 - dbname.Length); i++)
                            {
                                dbname = dbname + " ";
                            }
                        }
                    }
                    else if (kostyl == 2)
                    {
                        if (dbname.Length < 18)
                        {
                            for (int i = 0; i < (18 - dbname.Length); i++)
                            {
                                dbname = dbname + " ";
                            }
                        }
                    }
                    else if (kostyl == 3)
                    {
                        if (dbname.Length < 18)
                        {
                            for (int i = 0; i < (18 - dbname.Length); i++)
                            {
                                dbname = dbname + " ";
                            }
                        }
                    }
                    byte[] MongoDB_DBName = Encoding.ASCII.GetBytes(dbname);
                    fullresponse = Combine(fullresponse, MongoDB_DBName);
                }
            }

            fullresponse = Combine(fullresponse, responseSchemaEnd);
            return fullresponse;
        }
    }
}